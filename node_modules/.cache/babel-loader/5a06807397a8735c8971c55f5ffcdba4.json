{"ast":null,"code":"import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { usePortalManager } from \"./portal-manager\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/components/portal\n */\n\nexport var Portal = props => {\n  var {\n    onMount,\n    onUnmount,\n    children,\n    getContainer\n  } = props;\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n\n  var [portal] = React.useState(() => {\n    if (isBrowser) {\n      var div = document.createElement(\"div\");\n      div.className = \"chakra-portal\";\n      return div;\n    } // for ssr\n\n\n    return null;\n  });\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n\n  var parentPortal = usePortalContext();\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n\n  var manager = usePortalManager();\n  var append = React.useCallback(container => {\n    // if user specified a mount node, do nothing.\n    if (!portal || !container) return; // else, simply append component to the portal node\n\n    container.appendChild(portal);\n  }, [portal]);\n  useSafeLayoutEffect(() => {\n    var _ref, _ref2; // get the custom container from the container prop\n\n\n    var customContainer = getContainer == null ? void 0 : getContainer();\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it is not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n\n    var container = (_ref = (_ref2 = customContainer != null ? customContainer : parentPortal) != null ? _ref2 : manager == null ? void 0 : manager.node) != null ? _ref : document.body;\n    /**\n     * Append portal node to the computed container\n     */\n\n    append(container);\n    onMount == null ? void 0 : onMount();\n    return () => {\n      onUnmount == null ? void 0 : onUnmount();\n      if (!portal) return;\n\n      if (container == null ? void 0 : container.contains(portal)) {\n        container == null ? void 0 : container.removeChild(portal);\n      }\n    };\n  }, [getContainer, portal, parentPortal, onMount, onUnmount, manager == null ? void 0 : manager.node, append]);\n  var portalChildren = (manager == null ? void 0 : manager.zIndex) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chakra-portal-zIndex\",\n    style: {\n      position: \"absolute\",\n      zIndex: manager.zIndex,\n      width: \"100%\"\n    }\n  }, children) : children;\n\n  if (!portal) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, portalChildren);\n  }\n\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {\n    value: portal\n  }, portalChildren), portal);\n};\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}","map":{"version":3,"sources":["../../src/portal.tsx"],"names":["createContext","strict","name","Portal","props","getContainer","div","document","parentPortal","usePortalContext","manager","usePortalManager","append","container","useSafeLayoutEffect","customContainer","onMount","onUnmount","portalChildren","position","zIndex","width","portal"],"mappings":"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","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nexport interface PortalProps {\n  /**\n   * Function called when the portal mounts\n   */\n  onMount?(): void\n  /**\n   * Function called when the portal unmounts\n   */\n  onUnmount?(): void\n  /**\n   * Function that will be called to get the parent element\n   * that the portal will be attached to.\n   */\n  getContainer?: () => HTMLElement | null\n  /**\n   * The content or node you'll like to portal\n   */\n  children?: React.ReactNode\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/components/portal\n */\nexport const Portal: React.FC<PortalProps> = (props) => {\n  const { onMount, onUnmount, children, getContainer } = props\n\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n  const [portal] = React.useState(() => {\n    if (isBrowser) {\n      const div = document.createElement(\"div\")\n      div.className = \"chakra-portal\"\n      return div\n    }\n    // for ssr\n    return null\n  })\n\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n  const parentPortal = usePortalContext()\n\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n  const manager = usePortalManager()\n\n  const append = React.useCallback(\n    (container: HTMLElement | null) => {\n      // if user specified a mount node, do nothing.\n      if (!portal || !container) return\n\n      // else, simply append component to the portal node\n      container.appendChild(portal)\n    },\n    [portal],\n  )\n\n  useSafeLayoutEffect(() => {\n    // get the custom container from the container prop\n    const customContainer = getContainer?.()\n\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it is not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n    const container =\n      customContainer ?? parentPortal ?? manager?.node ?? document.body\n\n    /**\n     * Append portal node to the computed container\n     */\n    append(container)\n\n    onMount?.()\n\n    return () => {\n      onUnmount?.()\n\n      if (!portal) return\n\n      if (container?.contains(portal)) {\n        container?.removeChild(portal)\n      }\n    }\n  }, [\n    getContainer,\n    portal,\n    parentPortal,\n    onMount,\n    onUnmount,\n    manager?.node,\n    append,\n  ])\n\n  const portalChildren = manager?.zIndex ? (\n    <div\n      className=\"chakra-portal-zIndex\"\n      style={{\n        position: \"absolute\",\n        zIndex: manager.zIndex,\n        width: \"100%\",\n      }}\n    >\n      {children}\n    </div>\n  ) : (\n    children\n  )\n\n  if (!portal) {\n    return <>{portalChildren}</>\n  }\n\n  return ReactDOM.createPortal(\n    <PortalContextProvider value={portal}>\n      {portalChildren}\n    </PortalContextProvider>,\n    portal,\n  )\n}\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\"\n}\n"]},"metadata":{},"sourceType":"module"}