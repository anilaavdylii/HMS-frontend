{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = useMemo(function () {\n    return queries.map(function (options) {\n      var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n      defaultedOptions.optimisticResults = true;\n      return defaultedOptions;\n    });\n  }, [queries, queryClient]);\n\n  var _React$useState2 = React.useState(function () {\n    return new QueriesObserver(queryClient, defaultedQueries);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}","map":{"version":3,"names":["React","useMemo","notifyManager","QueriesObserver","useQueryClient","useQueries","queries","mountedRef","useRef","_React$useState","useState","forceUpdate","queryClient","defaultedQueries","map","options","defaultedOptions","defaultQueryObserverOptions","optimisticResults","_React$useState2","observer","result","getOptimisticResult","useEffect","current","unsubscribe","subscribe","batchCalls","x","setQueries","listeners"],"sources":["/Users/erakastrati/Desktop/HMS-frontend/node_modules/react-query/es/react/useQueries.js"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { notifyManager } from '../core/notifyManager';\r\nimport { QueriesObserver } from '../core/queriesObserver';\r\nimport { useQueryClient } from './QueryClientProvider';\r\nexport function useQueries(queries) {\r\n  var mountedRef = React.useRef(false);\r\n\r\n  var _React$useState = React.useState(0),\r\n      forceUpdate = _React$useState[1];\r\n\r\n  var queryClient = useQueryClient();\r\n  var defaultedQueries = useMemo(function () {\r\n    return queries.map(function (options) {\r\n      var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\r\n\r\n      defaultedOptions.optimisticResults = true;\r\n      return defaultedOptions;\r\n    });\r\n  }, [queries, queryClient]);\r\n\r\n  var _React$useState2 = React.useState(function () {\r\n    return new QueriesObserver(queryClient, defaultedQueries);\r\n  }),\r\n      observer = _React$useState2[0];\r\n\r\n  var result = observer.getOptimisticResult(defaultedQueries);\r\n  React.useEffect(function () {\r\n    mountedRef.current = true;\r\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\r\n      if (mountedRef.current) {\r\n        forceUpdate(function (x) {\r\n          return x + 1;\r\n        });\r\n      }\r\n    }));\r\n    return function () {\r\n      mountedRef.current = false;\r\n      unsubscribe();\r\n    };\r\n  }, [observer]);\r\n  React.useEffect(function () {\r\n    // Do not notify on updates because of changes in the options because\r\n    // these changes should already be reflected in the optimistic result.\r\n    observer.setQueries(defaultedQueries, {\r\n      listeners: false\r\n    });\r\n  }, [defaultedQueries, observer]);\r\n  return result;\r\n}"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;EAClC,IAAIC,UAAU,GAAGP,KAAK,CAACQ,MAAN,CAAa,KAAb,CAAjB;;EAEA,IAAIC,eAAe,GAAGT,KAAK,CAACU,QAAN,CAAe,CAAf,CAAtB;EAAA,IACIC,WAAW,GAAGF,eAAe,CAAC,CAAD,CADjC;;EAGA,IAAIG,WAAW,GAAGR,cAAc,EAAhC;EACA,IAAIS,gBAAgB,GAAGZ,OAAO,CAAC,YAAY;IACzC,OAAOK,OAAO,CAACQ,GAAR,CAAY,UAAUC,OAAV,EAAmB;MACpC,IAAIC,gBAAgB,GAAGJ,WAAW,CAACK,2BAAZ,CAAwCF,OAAxC,CAAvB,CADoC,CACqC;;MAEzEC,gBAAgB,CAACE,iBAAjB,GAAqC,IAArC;MACA,OAAOF,gBAAP;IACD,CALM,CAAP;EAMD,CAP6B,EAO3B,CAACV,OAAD,EAAUM,WAAV,CAP2B,CAA9B;;EASA,IAAIO,gBAAgB,GAAGnB,KAAK,CAACU,QAAN,CAAe,YAAY;IAChD,OAAO,IAAIP,eAAJ,CAAoBS,WAApB,EAAiCC,gBAAjC,CAAP;EACD,CAFsB,CAAvB;EAAA,IAGIO,QAAQ,GAAGD,gBAAgB,CAAC,CAAD,CAH/B;;EAKA,IAAIE,MAAM,GAAGD,QAAQ,CAACE,mBAAT,CAA6BT,gBAA7B,CAAb;EACAb,KAAK,CAACuB,SAAN,CAAgB,YAAY;IAC1BhB,UAAU,CAACiB,OAAX,GAAqB,IAArB;IACA,IAAIC,WAAW,GAAGL,QAAQ,CAACM,SAAT,CAAmBxB,aAAa,CAACyB,UAAd,CAAyB,YAAY;MACxE,IAAIpB,UAAU,CAACiB,OAAf,EAAwB;QACtBb,WAAW,CAAC,UAAUiB,CAAV,EAAa;UACvB,OAAOA,CAAC,GAAG,CAAX;QACD,CAFU,CAAX;MAGD;IACF,CANoC,CAAnB,CAAlB;IAOA,OAAO,YAAY;MACjBrB,UAAU,CAACiB,OAAX,GAAqB,KAArB;MACAC,WAAW;IACZ,CAHD;EAID,CAbD,EAaG,CAACL,QAAD,CAbH;EAcApB,KAAK,CAACuB,SAAN,CAAgB,YAAY;IAC1B;IACA;IACAH,QAAQ,CAACS,UAAT,CAAoBhB,gBAApB,EAAsC;MACpCiB,SAAS,EAAE;IADyB,CAAtC;EAGD,CAND,EAMG,CAACjB,gBAAD,EAAmBO,QAAnB,CANH;EAOA,OAAOC,MAAP;AACD"},"metadata":{},"sourceType":"module"}