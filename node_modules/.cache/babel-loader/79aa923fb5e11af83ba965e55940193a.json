{"ast":null,"code":"import * as React from \"react\";\nexport function useEventListeners() {\n  var listeners = React.useRef(new Map());\n  var add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  var remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  React.useEffect(() => {\n    return () => {\n      listeners.current.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options);\n      });\n    };\n  }, [remove]);\n  return {\n    add,\n    remove\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listeners.ts"],"names":["listeners","React","add","options","el","remove","value"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AA6BA,OAAO,SAAA,iBAAA,GAA6C;EAClD,IAAMA,SAAS,GAAGC,KAAK,CAALA,MAAAA,CAAa,IAA/B,GAA+B,EAAbA,CAAlB;EAEA,IAAMC,GAAG,GAAG,KAAK,CAAL,WAAA,CAAkB,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,KAAiC;IAC7DF,SAAS,CAATA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAgC;MAAA,IAAA;MAAA,EAAA;MAAYG;IAAZ,CAAhCH;IACAI,EAAE,CAAFA,gBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA;EAFU,CAAA,EAAZ,EAAY,CAAZ;EAKA,IAAMC,MAAM,GAAG,KAAK,CAAL,WAAA,CAAkB,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,KAAiC;IAChED,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA;IACAJ,SAAS,CAATA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA;EAFa,CAAA,EAAf,EAAe,CAAf;EAKAC,KAAK,CAALA,SAAAA,CAAgB,MAAM;IACpB,OAAO,MAAM;MACXD,SAAS,CAATA,OAAAA,CAAAA,OAAAA,CAA0B,CAAA,KAAA,EAAA,GAAA,KAAgB;QACxCK,MAAM,CAACC,KAAK,CAAN,EAAA,EAAWA,KAAK,CAAhB,IAAA,EAAA,GAAA,EAA4BA,KAAK,CAAvCD,OAAM,CAANA;MADFL,CAAAA;IADF,CAAA;EADFC,CAAAA,EAMG,CANHA,MAMG,CANHA;EAQA,OAAO;IAAA,GAAA;IAAOI;EAAP,CAAP;AACD","sourcesContent":["import * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = React.useRef(new Map())\n\n  const add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options)\n    listeners.current.delete(listener)\n  }, [])\n\n  React.useEffect(() => {\n    return () => {\n      listeners.current.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    }\n  }, [remove])\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}