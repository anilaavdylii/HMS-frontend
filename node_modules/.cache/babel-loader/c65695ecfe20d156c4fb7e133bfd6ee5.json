{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string|number}\r\n   * @required\r\n   */\n  id: PropTypes.any,\n\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#menu-props) for more details_\r\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown'\n};\nvar SplitButton = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"rootCloseEvent\"]);\n\n  return React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: ButtonGroup\n  }), React.createElement(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick\n  }, title), React.createElement(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Button","ButtonGroup","Dropdown","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","disabled","bool","menuRole","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","_ref","ref","children","props","createElement","as","Toggle","split","childBsPrefix","className","Menu","role","displayName"],"sources":["C:/Users/hp/Desktop/frontenddd/HMS-frontend/node_modules/react-bootstrap/esm/SplitButton.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport Dropdown from './Dropdown';\r\nvar propTypes = {\r\n  /**\r\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\r\n   * @type {string|number}\r\n   * @required\r\n   */\r\n  id: PropTypes.any,\r\n\r\n  /**\r\n   * Accessible label for the toggle; the value of `title` if not specified.\r\n   */\r\n  toggleLabel: PropTypes.string,\r\n\r\n  /** An `href` passed to the non-toggle Button */\r\n  href: PropTypes.string,\r\n\r\n  /** An anchor `target` passed to the non-toggle Button */\r\n  target: PropTypes.string,\r\n\r\n  /** An `onClick` handler passed to the non-toggle Button */\r\n  onClick: PropTypes.func,\r\n\r\n  /** The content of the non-toggle Button.  */\r\n  title: PropTypes.node.isRequired,\r\n\r\n  /** Disables both Buttons  */\r\n  disabled: PropTypes.bool,\r\n\r\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\r\n  menuRole: PropTypes.string,\r\n\r\n  /**\r\n   *  Which event when fired outside the component will cause it to be closed.\r\n   *\r\n   * _see [DropdownMenu](#menu-props) for more details_\r\n   */\r\n  rootCloseEvent: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  bsPrefix: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  variant: PropTypes.string,\r\n\r\n  /** @ignore */\r\n  size: PropTypes.string\r\n};\r\nvar defaultProps = {\r\n  toggleLabel: 'Toggle dropdown'\r\n};\r\nvar SplitButton = React.forwardRef(function (_ref, ref) {\r\n  var id = _ref.id,\r\n      bsPrefix = _ref.bsPrefix,\r\n      size = _ref.size,\r\n      variant = _ref.variant,\r\n      title = _ref.title,\r\n      toggleLabel = _ref.toggleLabel,\r\n      children = _ref.children,\r\n      onClick = _ref.onClick,\r\n      href = _ref.href,\r\n      target = _ref.target,\r\n      menuRole = _ref.menuRole,\r\n      rootCloseEvent = _ref.rootCloseEvent,\r\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"rootCloseEvent\"]);\r\n\r\n  return React.createElement(Dropdown, _extends({\r\n    ref: ref\r\n  }, props, {\r\n    as: ButtonGroup\r\n  }), React.createElement(Button, {\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    bsPrefix: bsPrefix,\r\n    href: href,\r\n    target: target,\r\n    onClick: onClick\r\n  }, title), React.createElement(Dropdown.Toggle, {\r\n    split: true,\r\n    id: id,\r\n    size: size,\r\n    variant: variant,\r\n    disabled: props.disabled,\r\n    childBsPrefix: bsPrefix\r\n  }, React.createElement(\"span\", {\r\n    className: \"sr-only\"\r\n  }, toggleLabel)), React.createElement(Dropdown.Menu, {\r\n    role: menuRole,\r\n    rootCloseEvent: rootCloseEvent\r\n  }, children));\r\n});\r\nSplitButton.propTypes = propTypes;\r\nSplitButton.defaultProps = defaultProps;\r\nSplitButton.displayName = 'SplitButton';\r\nexport default SplitButton;"],"mappings":"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"},"metadata":{},"sourceType":"module"}