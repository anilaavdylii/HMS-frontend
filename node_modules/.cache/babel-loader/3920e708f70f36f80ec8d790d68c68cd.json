{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var StackDivider = props => {\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-stack__divider\"\n  }, props, {\n    __css: _extends({}, props.__css, {\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    })\n  }));\n};\nexport var StackItem = props => /*#__PURE__*/React.createElement(chakra.div, _extends({\n  className: \"chakra-stack__item\"\n}, props, {\n  __css: _extends({\n    display: \"inline-block\",\n    flex: \"0 0 auto\",\n    minWidth: 0\n  }, props[\"__css\"])\n}));\n/**\n * If we ever run into SSR issues with this, check this post to find a fix for it:\n * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n */\n\nvar selector = \"& > *:not(style) ~ *:not(style)\";\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/components/stack\n *\n */\n\nexport var Stack = /*#__PURE__*/forwardRef(function Stack(props, ref) {\n  var {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"]);\n\n  var direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  var styles = React.useMemo(() => {\n    var directionStyles = {\n      column: {\n        mt: spacing,\n        ml: 0\n      },\n      row: {\n        ml: spacing,\n        mt: 0\n      },\n      \"column-reverse\": {\n        mb: spacing,\n        mr: 0\n      },\n      \"row-reverse\": {\n        mr: spacing,\n        mb: 0\n      }\n    };\n    return {\n      flexDirection: direction,\n      [selector]: mapResponsive(direction, value => directionStyles[value])\n    };\n  }, [direction, spacing]);\n  /**\n   * Divider Styles\n   */\n\n  var marginX = mapResponsive(direction, value => value.includes(\"row\") ? spacing : 0);\n  var marginY = mapResponsive(direction, value => value.includes(\"row\") ? 0 : spacing);\n  var borderLeftWidth = mapResponsive(direction, value => value.includes(\"row\") ? \"1px\" : 0);\n  var borderBottomWidth = mapResponsive(direction, value => value.includes(\"row\") ? 0 : \"1px\");\n  var dividerStyles = {\n    marginX,\n    marginY,\n    borderLeftWidth,\n    borderBottomWidth\n  };\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = /*#__PURE__*/React.createElement(StackItem, {\n      key: index\n    }, child);\n\n    var _child = shouldWrapChildren ? wrappedChild : child;\n\n    if (!hasDivider) return _child;\n    var clonedDivider = /*#__PURE__*/React.cloneElement(divider, dividerStyles);\n\n    var _divider = isLast ? null : clonedDivider;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: index\n    }, [_child, _divider]);\n  });\n\n  var _className = cx(\"chakra-stack\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : {\n      [selector]: styles[selector]\n    }\n  }, rest), clones);\n});\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\";\n}\n/**\n * A view that arranges its children in a horizontal line.\n */\n\n\nexport var HStack = /*#__PURE__*/forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"row\",\n    ref: ref\n  }));\n});\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\";\n}\n/**\n * A view that arranges its children in a vertical line.\n */\n\n\nexport var VStack = /*#__PURE__*/forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"column\",\n    ref: ref\n  }));\n});\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\";\n}","map":{"version":3,"sources":["../../src/stack.tsx"],"names":["StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","selector","Stack","forwardRef","direction","spacing","shouldWrapChildren","rest","isInline","directionProp","styles","directionStyles","column","mt","ml","row","mb","mr","flexDirection","mapResponsive","value","marginX","marginY","borderLeftWidth","borderBottomWidth","dividerStyles","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","isLast","index","wrappedChild","_child","clonedDivider","React","_divider","_className","cx","HStack","ref","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  PropsOf,\n  ResponsiveValue,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => {\n  return (\n    <chakra.div\n      className=\"chakra-stack__divider\"\n      {...props}\n      __css={{\n        ...props.__css,\n        borderWidth: 0,\n        alignSelf: \"stretch\",\n        borderColor: \"inherit\",\n        width: \"auto\",\n        height: \"auto\",\n      }}\n    />\n  )\n}\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends PropsOf<typeof chakra.div>, StackOptions {}\n\n/**\n * If we ever run into SSR issues with this, check this post to find a fix for it:\n * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n */\nconst selector = \"& > *:not(style) ~ *:not(style)\"\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/components/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">(function Stack(props, ref) {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => {\n    const directionStyles = {\n      column: { mt: spacing, ml: 0 },\n      row: { ml: spacing, mt: 0 },\n      \"column-reverse\": { mb: spacing, mr: 0 },\n      \"row-reverse\": { mr: spacing, mb: 0 },\n    }\n\n    return {\n      flexDirection: direction,\n      [selector]: mapResponsive(direction, (value) => directionStyles[value]),\n    }\n  }, [direction, spacing])\n\n  /**\n   * Divider Styles\n   */\n  const marginX = mapResponsive(direction, (value) =>\n    value.includes(\"row\") ? spacing : 0,\n  )\n\n  const marginY = mapResponsive(direction, (value) =>\n    value.includes(\"row\") ? 0 : spacing,\n  )\n\n  const borderLeftWidth = mapResponsive(direction, (value) =>\n    value.includes(\"row\") ? \"1px\" : 0,\n  )\n\n  const borderBottomWidth = mapResponsive(direction, (value) =>\n    value.includes(\"row\") ? 0 : \"1px\",\n  )\n\n  const dividerStyles = {\n    marginX,\n    marginY,\n    borderLeftWidth,\n    borderBottomWidth,\n  }\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={index}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(divider as any, dividerStyles)\n        const _divider = isLast ? null : clonedDivider\n\n        return <React.Fragment key={index}>{[_child, _divider]}</React.Fragment>\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => {\n  return <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n})\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => {\n  return <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n})\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"]},"metadata":{},"sourceType":"module"}