{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */\nimport { runIfFn, warn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport function useControllableProp(prop, state) {\n  var {\n    current: isControlled\n  } = React.useRef(prop !== undefined);\n  var value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\nvar defaultPropsMap = {\n  value: \"value\",\n  defaultValue: \"defaultValue\",\n  onChange: \"onChange\"\n};\n/**\n * React hook for using controlling component state.\n * @param props\n */\n\nexport function useControllableState(props) {\n  var {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    name = \"Component\",\n    propsMap = defaultPropsMap\n  } = props;\n  var [valueState, setValue] = React.useState(defaultValue);\n  var {\n    current: isControlled\n  } = React.useRef(valueProp !== undefined); // don't switch from controlled to uncontrolled\n\n  React.useEffect(() => {\n    var nextIsControlled = valueProp !== undefined;\n    var nextMode = nextIsControlled ? \"a controlled\" : \"an uncontrolled\";\n    var mode = isControlled ? \"a controlled\" : \"an uncontrolled\";\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message: \"Warning: \" + name + \" is changing from \" + mode + \" to \" + nextMode + \" component. \" + \"Components should not switch from controlled to uncontrolled (or vice versa). \" + (\"Use the '\" + propsMap.value + \"' with an '\" + propsMap.onChange + \"' handler. \") + (\"If you want an uncontrolled component, remove the \" + propsMap.value + \" prop and use '\" + propsMap.defaultValue + \"' instead. \\\"\") + \"More info: https://fb.me/react-controlled-components\"\n    });\n  }, [valueProp, isControlled, name]);\n  var {\n    current: initialDefaultValue\n  } = React.useRef(defaultValue);\n  React.useEffect(() => {\n    warn({\n      condition: initialDefaultValue !== defaultValue,\n      message: \"Warning: A component is changing the default value of an uncontrolled \" + name + \" after being initialized. \" + (\"To suppress this warning opt to use a controlled \" + name + \".\")\n    });\n  }, [JSON.stringify(defaultValue)]);\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(next => {\n    var nextValue = runIfFn(next, value);\n    if (!isControlled) setValue(nextValue);\n    onChange == null ? void 0 : onChange(nextValue);\n  }, [onChange]);\n  return [value, updateValue];\n}","map":{"version":3,"sources":["../../src/use-controllable.ts"],"names":["current","isControlled","React","prop","value","defaultPropsMap","defaultValue","onChange","name","propsMap","valueProp","nextIsControlled","nextMode","mode","warn","condition","message","initialDefaultValue","JSON","updateValue","next","nextValue","runIfFn","setValue"],"mappings":"AAAA;AACA,SAAA,OAAA,EAAA,IAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAA+D;EACpE,IAAM;IAAEA,OAAO,EAAEC;EAAX,IAA4BC,KAAK,CAALA,MAAAA,CAAaC,IAAI,KAAnD,SAAkCD,CAAlC;EACA,IAAME,KAAK,GAAGH,YAAY,IAAI,OAAA,IAAA,KAAhBA,WAAAA,GAAAA,IAAAA,GAAd,KAAA;EACA,OAAO,CAAA,YAAA,EAAP,KAAO,CAAP;AACD;AAiCD,IAAMI,eAAe,GAAG;EACtBD,KAAK,EADiB,OAAA;EAEtBE,YAAY,EAFU,cAAA;EAGtBC,QAAQ,EAAE;AAHY,CAAxB;AAMA;AACA;AACA;AACA;;AACA,OAAO,SAAA,oBAAA,CAAA,KAAA,EAAsE;EAC3E,IAAM;IACJH,KAAK,EADD,SAAA;IAAA,YAAA;IAAA,QAAA;IAIJI,IAAI,GAJA,WAAA;IAKJC,QAAQ,GAAGJ;EALP,IAAN,KAAA;EAQA,IAAM,CAAA,UAAA,EAAA,QAAA,IAAyBH,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B;EACA,IAAM;IAAEF,OAAO,EAAEC;EAAX,IAA4BC,KAAK,CAALA,MAAAA,CAAaQ,SAAS,KAVmB,SAUzCR,CAAlC,CAV2E,CAY3E;;EACAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;IACpB,IAAMS,gBAAgB,GAAGD,SAAS,KAAlC,SAAA;IAEA,IAAME,QAAQ,GAAGD,gBAAgB,GAAA,cAAA,GAAjC,iBAAA;IACA,IAAME,IAAI,GAAGZ,YAAY,GAAA,cAAA,GAAzB,iBAAA;IAEAa,IAAI,CAAC;MACHC,SAAS,EAAEd,YAAY,KADpB,gBAAA;MAEHe,OAAO,EACL,cAAA,IAAA,GAAA,oBAAA,GAAA,IAAA,GAAA,MAAA,GAAA,QAAA,GAAA,cAAA,GAAA,gFAAA,IAAA,cAEYP,QAAQ,CAFpB,KAAA,GAAA,aAAA,GAEwCA,QAAQ,CAFhD,QAAA,GAAA,aAAA,KAAA,uDAGqDA,QAAQ,CAH7D,KAAA,GAAA,iBAAA,GAGqFA,QAAQ,CAH7F,YAAA,GAAA,eAAA,IAAA;IAHC,CAAD,CAAJK;EANFZ,CAAAA,EAeG,CAAA,SAAA,EAAA,YAAA,EAfHA,IAeG,CAfHA;EAiBA,IAAM;IAAEF,OAAO,EAAEiB;EAAX,IAAmCf,KAAK,CAALA,MAAAA,CAAzC,YAAyCA,CAAzC;EAEAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;IACpBY,IAAI,CAAC;MACHC,SAAS,EAAEE,mBAAmB,KAD3B,YAAA;MAEHD,OAAO,EACL,2EAAA,IAAA,GAAA,4BAAA,IAAA,sDAAA,IAAA,GAAA,GAAA;IAHC,CAAD,CAAJF;EADFZ,CAAAA,EAOG,CAACgB,IAAI,CAAJA,SAAAA,CAPJhB,YAOIgB,CAAD,CAPHhB;EASA,IAAME,KAAK,GAAGH,YAAY,GAAA,SAAA,GAA1B,UAAA;EAEA,IAAMkB,WAAW,GAAG,KAAK,CAAL,WAAA,CACjBC,IAAD,IAAmC;IACjC,IAAMC,SAAS,GAAGC,OAAO,CAAA,IAAA,EAAzB,KAAyB,CAAzB;IACA,IAAI,CAAJ,YAAA,EAAmBC,QAAQ,CAARA,SAAQ,CAARA;IACnBhB,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAARA,SAAQ,CAARA;EAJgB,CAAA,EAMlB,CANF,QAME,CANkB,CAApB;EASA,OAAO,CAAA,KAAA,EAAP,WAAO,CAAP;AACD","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { runIfFn, warn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined)\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n  /**\n   * A mapping for the props to give more contextual warning messages.\n   *\n   * In some components `value` might be called `index`, and defaultValue\n   * might be called `defaultIndex`, so this map helps us generate\n   * contextual warning messages\n   */\n  propsMap?: {\n    value: string\n    defaultValue: string\n    onChange: string\n  }\n}\n\nconst defaultPropsMap = {\n  value: \"value\",\n  defaultValue: \"defaultValue\",\n  onChange: \"onChange\",\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    name = \"Component\",\n    propsMap = defaultPropsMap,\n  } = props\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const { current: isControlled } = React.useRef(valueProp !== undefined)\n\n  // don't switch from controlled to uncontrolled\n  React.useEffect(() => {\n    const nextIsControlled = valueProp !== undefined\n\n    const nextMode = nextIsControlled ? \"a controlled\" : \"an uncontrolled\"\n    const mode = isControlled ? \"a controlled\" : \"an uncontrolled\"\n\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message:\n        `Warning: ${name} is changing from ${mode} to ${nextMode} component. ` +\n        `Components should not switch from controlled to uncontrolled (or vice versa). ` +\n        `Use the '${propsMap.value}' with an '${propsMap.onChange}' handler. ` +\n        `If you want an uncontrolled component, remove the ${propsMap.value} prop and use '${propsMap.defaultValue}' instead. \"` +\n        `More info: https://fb.me/react-controlled-components`,\n    })\n  }, [valueProp, isControlled, name])\n\n  const { current: initialDefaultValue } = React.useRef(defaultValue)\n\n  React.useEffect(() => {\n    warn({\n      condition: initialDefaultValue !== defaultValue,\n      message:\n        `Warning: A component is changing the default value of an uncontrolled ${name} after being initialized. ` +\n        `To suppress this warning opt to use a controlled ${name}.`,\n    })\n  }, [JSON.stringify(defaultValue)])\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) setValue(nextValue)\n      onChange?.(nextValue)\n    },\n    [onChange],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}