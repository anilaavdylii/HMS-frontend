{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, dataAttr, mergeRefs } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/components/useCheckbox\n */\n\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovered] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [checkedState, setCheckedState] = useState(!!defaultIsChecked);\n  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChange]);\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    var notInSync = ref.current.checked && !isChecked || !ref.current.checked && isChecked;\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked);\n    }\n  }, [ref.current]);\n\n  var getCheckboxProps = function getCheckboxProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = event => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  };\n\n  var getLabelProps = function getLabelProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["props","isChecked","id","htmlProps","useBoolean","ref","useRef","useState","useControllableProp","handleChange","useCallback","event","isReadOnly","setCheckedState","isIndeterminate","onChange","useSafeLayoutEffect","Boolean","trulyDisabled","isDisabled","onKeyDown","setActive","onKeyUp","notInSync","getCheckboxProps","forwardedRef","onPressDown","dataAttr","onMouseDown","callAllHandlers","onMouseUp","onMouseEnter","setHovered","onMouseLeave","getInputProps","mergeRefs","type","onBlur","setFocused","onFocus","required","checked","disabled","readOnly","style","visuallyHiddenStyle","getLabelProps","onTouchStart","state","isRequired"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/components/useCheckbox\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultIsChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const notInSync =\n      (ref.current.checked && !isChecked) || (!ref.current.checked && isChecked)\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked)\n    }\n  }, [ref.current])\n\n  const getCheckboxProps: PropGetter = (props = {}, forwardedRef = null) => {\n    const onPressDown = (event: React.MouseEvent) => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault()\n      setActive.on()\n    }\n\n    return {\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n    }\n  }\n\n  const getInputProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    type: \"checkbox\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    required: isRequired,\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": isInvalid,\n    \"aria-disabled\": isDisabled,\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, forwardedRef = null) => {\n    return {\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }\n  }\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"]},"metadata":{},"sourceType":"module"}