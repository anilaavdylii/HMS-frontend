{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useTheme } from \"@chakra-ui/system\";\nimport { cx, filterUndefined, mapResponsive, memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n */\n\nexport var Container = /*#__PURE__*/forwardRef(function Container(props, ref) {\n  var {\n    maxWidth,\n    width,\n    minWidth,\n    w,\n    minW,\n    maxW,\n    className,\n    centerContent\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"maxWidth\", \"width\", \"minWidth\", \"w\", \"minW\", \"maxW\", \"className\", \"centerContent\"]);\n\n  var theme = useTheme();\n  var widthProps = transform(theme, {\n    maxW,\n    maxWidth,\n    width,\n    w,\n    minWidth,\n    minW\n  });\n\n  var styles = _extends({\n    w: \"100%\",\n    mx: \"auto\",\n    maxW: \"60ch\",\n    px: \"1rem\"\n  }, centerContent && {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  }, widthProps);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-container\", className)\n  }, rest, {\n    __css: styles\n  }));\n});\n\nif (__DEV__) {\n  Container.displayName = \"Container\";\n}\n\nfunction transform(theme, props) {\n  var result = {};\n  Object.keys(props).forEach(prop => {\n    var propValue = props[prop];\n    result[prop] = mapResponsive(propValue, value => get(theme, \"sizes.container.\" + value, value));\n  });\n  return filterUndefined(result);\n}","map":{"version":3,"sources":["../../src/container.tsx"],"names":["memoizedGet","Container","forwardRef","centerContent","rest","theme","useTheme","widthProps","transform","minW","styles","w","mx","maxW","px","display","flexDirection","alignItems","cx","result","Object","prop","propValue","props","mapResponsive","value","get","filterUndefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,QAAA,QAAA,mBAAA;AAOA,SAAA,EAAA,EAAA,eAAA,EAAA,aAAA,EAKEA,WAAW,IALb,GAAA,EAAA,OAAA,QAAA,kBAAA;AAQA,OAAO,KAAP,KAAA,MAAA,OAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAA,aAAGC,UAAU,CAAwB,SAAA,SAAA,CAAA,KAAA,EAAA,GAAA,EAGzD;EACA,IAAM;IAAA,QAAA;IAAA,KAAA;IAAA,QAAA;IAAA,CAAA;IAAA,IAAA;IAAA,IAAA;IAAA,SAAA;IAQJC;EARI,IAAN,KAAA;EAAA,IASKC,IATL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,UAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA,eAAA,CAAA,CAAA;;EAYA,IAAMC,KAAK,GAAGC,QAAd,EAAA;EAEA,IAAMC,UAAU,GAAGC,SAAS,CAAA,KAAA,EAAQ;IAAA,IAAA;IAAA,QAAA;IAAA,KAAA;IAAA,CAAA;IAAA,QAAA;IAMlCC;EANkC,CAAR,CAA5B;;EASA,IAAMC,MAAyB,GAAA,QAAA,CAAA;IAC7BC,CAAC,EAD4B,MAAA;IAE7BC,EAAE,EAF2B,MAAA;IAG7BC,IAAI,EAHyB,MAAA;IAI7BC,EAAE,EAAE;EAJyB,CAAA,EAKzBX,aAAa,IAAI;IACnBY,OAAO,EADY,MAAA;IAEnBC,aAAa,EAFM,QAAA;IAGnBC,UAAU,EAAE;EAHO,CALQ,EAA/B,UAA+B,CAA/B;;EAaA,OAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;IACE,GAAG,EADL,GAAA;IAEE,SAAS,EAAEC,EAAE,CAAA,kBAAA,EAAA,SAAA;EAFf,CAAA,EAAA,IAAA,EAAA;IAIE,KAAK,EAAER;EAJT,CAAA,CAAA,CADF;AAxCK,CAA4B,CAA5B;;AAkDP,IAAA,OAAA,EAAa;EACXT,SAAS,CAATA,WAAAA,GAAAA,WAAAA;AACD;;AAED,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,EAA6C;EAC3C,IAAMkB,MAAyB,GAA/B,EAAA;EAEAC,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAA4BC,IAAD,IAAU;IACnC,IAAMC,SAAS,GAAGC,KAAK,CAAvB,IAAuB,CAAvB;IACAJ,MAAM,CAANA,IAAM,CAANA,GAAeK,aAAa,CAAA,SAAA,EAAaC,KAAD,IACtCC,GAAG,CAAA,KAAA,EAAA,qBAAA,KAAA,EADLP,KACK,CADuB,CAA5BA;EAFFC,CAAAA;EAOA,OAAOO,eAAe,CAAtB,MAAsB,CAAtB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  cx,\n  Dict,\n  filterUndefined,\n  mapResponsive,\n  memoizedGet as get,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ContainerProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const {\n    maxWidth,\n    width,\n    minWidth,\n    w,\n    minW,\n    maxW,\n    className,\n    centerContent,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n\n  const widthProps = transform(theme, {\n    maxW,\n    maxWidth,\n    width,\n    w,\n    minWidth,\n    minW,\n  })\n\n  const styles: SystemStyleObject = {\n    w: \"100%\",\n    mx: \"auto\",\n    maxW: \"60ch\",\n    px: \"1rem\",\n    ...(centerContent && {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    }),\n    ...widthProps,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Container.displayName = \"Container\"\n}\n\nfunction transform(theme: Dict, props: Dict) {\n  const result: SystemStyleObject = {}\n\n  Object.keys(props).forEach((prop) => {\n    const propValue = props[prop]\n    result[prop] = mapResponsive(propValue, (value) =>\n      get(theme, `sizes.container.${value}`, value),\n    )\n  })\n\n  return filterUndefined(result)\n}\n"]},"metadata":{},"sourceType":"module"}