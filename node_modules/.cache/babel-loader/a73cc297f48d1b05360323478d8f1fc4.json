{"ast":null,"code":"import { isNumber, memoizedGet as get } from \"@chakra-ui/utils\";\nimport { createParser, system } from \"@styled-system/core\";\n\nfunction transform(value, scale) {\n  var defaultValue = !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n  return get(scale, value, defaultValue);\n}\n\nvar config = {\n  width: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform\n  },\n  w: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform\n  },\n  height: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  h: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  boxSize: {\n    properties: [\"width\", \"height\"],\n    scale: \"sizes\"\n  },\n  minWidth: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  minW: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  minHeight: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  minH: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  maxWidth: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  maxW: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  maxHeight: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  maxH: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  d: {\n    property: \"display\"\n  },\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true\n};\n/**\n * Types for layout related CSS properties\n */\n\nexport var layout = system(config);\nexport var layoutParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/layout.ts"],"names":["memoizedGet","defaultValue","isNumber","value","get","config","width","property","scale","transform","w","height","h","boxSize","properties","minWidth","minW","minHeight","minH","maxWidth","maxW","maxHeight","maxH","d","overflow","overflowX","overflowY","display","verticalAlign","boxSizing","layout","system","layoutParser","createParser"],"mappings":"AAAA,SAAA,QAAA,EAAmBA,WAAW,IAA9B,GAAA,QAAA,kBAAA;AACA,SAAA,YAAA,EAAA,MAAA,QAAA,qBAAA;;AAIA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,EAA2C;EACzC,IAAMC,YAAY,GAAG,CAACC,QAAQ,CAAT,KAAS,CAAT,IAAoBC,KAAK,GAAzB,CAAA,GAAA,KAAA,GAA2CA,KAAK,GAAhD,GAA2CA,GAAhE,GAAA;EACA,OAAOC,GAAG,CAAA,KAAA,EAAA,KAAA,EAAV,YAAU,CAAV;AACD;;AAED,IAAMC,MAAc,GAAG;EACrBC,KAAK,EAAE;IACLC,QAAQ,EADH,OAAA;IAELC,KAAK,EAFA,OAAA;IAGLC;EAHK,CADc;EAMrBC,CAAC,EAAE;IACDH,QAAQ,EADP,OAAA;IAEDC,KAAK,EAFJ,OAAA;IAGDC;EAHC,CANkB;EAWrBE,MAAM,EAAE;IACNJ,QAAQ,EADF,QAAA;IAENC,KAAK,EAAE;EAFD,CAXa;EAerBI,CAAC,EAAE;IACDL,QAAQ,EADP,QAAA;IAEDC,KAAK,EAAE;EAFN,CAfkB;EAmBrBK,OAAO,EAAE;IACPC,UAAU,EAAE,CAAA,OAAA,EADL,QACK,CADL;IAEPN,KAAK,EAAE;EAFA,CAnBY;EAuBrBO,QAAQ,EAAE;IACRR,QAAQ,EADA,UAAA;IAERC,KAAK,EAAE;EAFC,CAvBW;EA2BrBQ,IAAI,EAAE;IACJT,QAAQ,EADJ,UAAA;IAEJC,KAAK,EAAE;EAFH,CA3Be;EA+BrBS,SAAS,EAAE;IACTV,QAAQ,EADC,WAAA;IAETC,KAAK,EAAE;EAFE,CA/BU;EAmCrBU,IAAI,EAAE;IACJX,QAAQ,EADJ,WAAA;IAEJC,KAAK,EAAE;EAFH,CAnCe;EAuCrBW,QAAQ,EAAE;IACRZ,QAAQ,EADA,UAAA;IAERC,KAAK,EAAE;EAFC,CAvCW;EA2CrBY,IAAI,EAAE;IACJb,QAAQ,EADJ,UAAA;IAEJC,KAAK,EAAE;EAFH,CA3Ce;EA+CrBa,SAAS,EAAE;IACTd,QAAQ,EADC,WAAA;IAETC,KAAK,EAAE;EAFE,CA/CU;EAmDrBc,IAAI,EAAE;IACJf,QAAQ,EADJ,WAAA;IAEJC,KAAK,EAAE;EAFH,CAnDe;EAuDrBe,CAAC,EAAE;IACDhB,QAAQ,EAAE;EADT,CAvDkB;EA0DrBiB,QAAQ,EA1Da,IAAA;EA2DrBC,SAAS,EA3DY,IAAA;EA4DrBC,SAAS,EA5DY,IAAA;EA6DrBC,OAAO,EA7Dc,IAAA;EA8DrBC,aAAa,EA9DQ,IAAA;EA+DrBC,SAAS,EAAE;AA/DU,CAAvB;AAkEA;AACA;AACA;;AAoFA,OAAO,IAAMC,MAAM,GAAGC,MAAM,CAArB,MAAqB,CAArB;AACP,OAAO,IAAMC,YAAY,GAAGC,YAAY,CAAjC,MAAiC,CAAjC","sourcesContent":["import { isNumber, memoizedGet as get } from \"@chakra-ui/utils\"\nimport { Config, createParser, system } from \"@styled-system/core\"\nimport * as CSS from \"csstype\"\nimport { Length, ResponsiveValue } from \"../utils\"\n\nfunction transform(value: any, scale: any) {\n  const defaultValue = !isNumber(value) || value > 1 ? value : `${value * 100}%`\n  return get(scale, value, defaultValue)\n}\n\nconst config: Config = {\n  width: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform,\n  },\n  w: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform,\n  },\n  height: {\n    property: \"height\",\n    scale: \"sizes\",\n  },\n  h: {\n    property: \"height\",\n    scale: \"sizes\",\n  },\n  boxSize: {\n    properties: [\"width\", \"height\"],\n    scale: \"sizes\",\n  },\n  minWidth: {\n    property: \"minWidth\",\n    scale: \"sizes\",\n  },\n  minW: {\n    property: \"minWidth\",\n    scale: \"sizes\",\n  },\n  minHeight: {\n    property: \"minHeight\",\n    scale: \"sizes\",\n  },\n  minH: {\n    property: \"minHeight\",\n    scale: \"sizes\",\n  },\n  maxWidth: {\n    property: \"maxWidth\",\n    scale: \"sizes\",\n  },\n  maxW: {\n    property: \"maxWidth\",\n    scale: \"sizes\",\n  },\n  maxHeight: {\n    property: \"maxHeight\",\n    scale: \"sizes\",\n  },\n  maxH: {\n    property: \"maxHeight\",\n    scale: \"sizes\",\n  },\n  d: {\n    property: \"display\",\n  },\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true,\n}\n\n/**\n * Types for layout related CSS properties\n */\nexport interface LayoutProps {\n  /**\n   * The CSS `display` property\n   */\n  display?: ResponsiveValue<CSS.Property.Display>\n  /**\n   * The CSS `display` property\n   */\n  d?: ResponsiveValue<CSS.Property.Display>\n  /**\n   * The CSS `width` property\n   */\n  width?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `width` property\n   */\n  w?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `width` and `height` property\n   */\n  boxSize?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `max-width` property\n   */\n  maxWidth?: ResponsiveValue<CSS.Property.MaxWidth<Length>>\n  /**\n   * The CSS `max-width` property\n   */\n  maxW?: ResponsiveValue<CSS.Property.MaxWidth<Length>>\n  /**\n   * The CSS `min-width` property\n   */\n  minWidth?: ResponsiveValue<CSS.Property.MinWidth<Length>>\n  /**\n   * The CSS `min-width` property\n   */\n  minW?: ResponsiveValue<CSS.Property.MinWidth<Length>>\n  /**\n   * The CSS `height` property\n   */\n  height?: ResponsiveValue<CSS.Property.Height<Length>>\n  /**\n   * The CSS `height` property\n   */\n  h?: ResponsiveValue<CSS.Property.Height<Length>>\n  /**\n   * The CSS `max-height` property\n   */\n  maxHeight?: ResponsiveValue<CSS.Property.MaxHeight<Length>>\n  /**\n   * The CSS `max-height` property\n   */\n  maxH?: ResponsiveValue<CSS.Property.MaxHeight<Length>>\n  /**\n   * The CSS `min-height` property\n   */\n  minHeight?: ResponsiveValue<CSS.Property.MinHeight<Length>>\n  /**\n   * The CSS `min-height` property\n   */\n  minH?: ResponsiveValue<CSS.Property.MinHeight<Length>>\n  /**\n   * The CSS `vertical-align` property\n   */\n  verticalAlign?: ResponsiveValue<CSS.Property.VerticalAlign<Length>>\n  /**\n   * The CSS `overflow` property\n   */\n  overflow?: ResponsiveValue<CSS.Property.Overflow>\n  /**\n   * The CSS `overflow-x` property\n   */\n  overflowX?: ResponsiveValue<CSS.Property.OverflowX>\n  /**\n   * The CSS `overflow-y` property\n   */\n  overflowY?: ResponsiveValue<CSS.Property.OverflowY>\n  /**\n   * The CSS `box-sizing` property\n   */\n  boxSizing?: CSS.Property.BoxSizing\n}\n\nexport const layout = system(config)\nexport const layoutParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}