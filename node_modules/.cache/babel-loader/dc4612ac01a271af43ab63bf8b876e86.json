{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useContext } from 'react';\nimport DropdownContext from './DropdownContext';\n/**\r\n * Wires up Dropdown toggle functinality, returning a set a props to attach\r\n * to the element that functions as the dropdown toggle (generally a button).\r\n */\n\nexport function useDropdownToggle() {\n  var _useContext = useContext(DropdownContext),\n      show = _useContext.show,\n      toggle = _useContext.toggle,\n      setToggle = _useContext.setToggle;\n\n  return [{\n    ref: setToggle,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\r\n   * A render prop that returns a Toggle element. The `props`\r\n   * argument should spread through to **a component that can accept a ref**. Use\r\n   * the `onToggle` argument to toggle the menu open or closed\r\n   *\r\n   * @type {Function ({\r\n   *   show: boolean,\r\n   *   toggle: (show: boolean) => void,\r\n   *   props: {\r\n   *     ref: (?HTMLElement) => void,\r\n   *     aria-haspopup: true\r\n   *     aria-expanded: boolean\r\n   *   },\r\n   * }) => React.Element}\r\n   */\n  children: PropTypes.func.isRequired\n};\n\nfunction DropdownToggle(_ref) {\n  var children = _ref.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      _useDropdownToggle$ = _useDropdownToggle[1],\n      show = _useDropdownToggle$.show,\n      toggle = _useDropdownToggle$.toggle;\n\n  return children({\n    show: show,\n    toggle: toggle,\n    props: props\n  });\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;","map":{"version":3,"names":["PropTypes","useContext","DropdownContext","useDropdownToggle","_useContext","show","toggle","setToggle","ref","propTypes","children","func","isRequired","DropdownToggle","_ref","_useDropdownToggle","props","_useDropdownToggle$","displayName"],"sources":["C:/Users/hp/Desktop/frontenddd/HMS-frontend/node_modules/react-overlays/esm/DropdownToggle.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useContext } from 'react';\r\nimport DropdownContext from './DropdownContext';\r\n/**\r\n * Wires up Dropdown toggle functinality, returning a set a props to attach\r\n * to the element that functions as the dropdown toggle (generally a button).\r\n */\r\n\r\nexport function useDropdownToggle() {\r\n  var _useContext = useContext(DropdownContext),\r\n      show = _useContext.show,\r\n      toggle = _useContext.toggle,\r\n      setToggle = _useContext.setToggle;\r\n\r\n  return [{\r\n    ref: setToggle,\r\n    'aria-haspopup': true,\r\n    'aria-expanded': !!show\r\n  }, {\r\n    show: show,\r\n    toggle: toggle\r\n  }];\r\n}\r\nvar propTypes = {\r\n  /**\r\n   * A render prop that returns a Toggle element. The `props`\r\n   * argument should spread through to **a component that can accept a ref**. Use\r\n   * the `onToggle` argument to toggle the menu open or closed\r\n   *\r\n   * @type {Function ({\r\n   *   show: boolean,\r\n   *   toggle: (show: boolean) => void,\r\n   *   props: {\r\n   *     ref: (?HTMLElement) => void,\r\n   *     aria-haspopup: true\r\n   *     aria-expanded: boolean\r\n   *   },\r\n   * }) => React.Element}\r\n   */\r\n  children: PropTypes.func.isRequired\r\n};\r\n\r\nfunction DropdownToggle(_ref) {\r\n  var children = _ref.children;\r\n\r\n  var _useDropdownToggle = useDropdownToggle(),\r\n      props = _useDropdownToggle[0],\r\n      _useDropdownToggle$ = _useDropdownToggle[1],\r\n      show = _useDropdownToggle$.show,\r\n      toggle = _useDropdownToggle$.toggle;\r\n\r\n  return children({\r\n    show: show,\r\n    toggle: toggle,\r\n    props: props\r\n  });\r\n}\r\n\r\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\r\nDropdownToggle.propTypes = propTypes;\r\n/** @component */\r\n\r\nexport default DropdownToggle;"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,GAA6B;EAClC,IAAIC,WAAW,GAAGH,UAAU,CAACC,eAAD,CAA5B;EAAA,IACIG,IAAI,GAAGD,WAAW,CAACC,IADvB;EAAA,IAEIC,MAAM,GAAGF,WAAW,CAACE,MAFzB;EAAA,IAGIC,SAAS,GAAGH,WAAW,CAACG,SAH5B;;EAKA,OAAO,CAAC;IACNC,GAAG,EAAED,SADC;IAEN,iBAAiB,IAFX;IAGN,iBAAiB,CAAC,CAACF;EAHb,CAAD,EAIJ;IACDA,IAAI,EAAEA,IADL;IAEDC,MAAM,EAAEA;EAFP,CAJI,CAAP;AAQD;AACD,IAAIG,SAAS,GAAG;EACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAEV,SAAS,CAACW,IAAV,CAAeC;AAhBX,CAAhB;;AAmBA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;EAC5B,IAAIJ,QAAQ,GAAGI,IAAI,CAACJ,QAApB;;EAEA,IAAIK,kBAAkB,GAAGZ,iBAAiB,EAA1C;EAAA,IACIa,KAAK,GAAGD,kBAAkB,CAAC,CAAD,CAD9B;EAAA,IAEIE,mBAAmB,GAAGF,kBAAkB,CAAC,CAAD,CAF5C;EAAA,IAGIV,IAAI,GAAGY,mBAAmB,CAACZ,IAH/B;EAAA,IAIIC,MAAM,GAAGW,mBAAmB,CAACX,MAJjC;;EAMA,OAAOI,QAAQ,CAAC;IACdL,IAAI,EAAEA,IADQ;IAEdC,MAAM,EAAEA,MAFM;IAGdU,KAAK,EAAEA;EAHO,CAAD,CAAf;AAKD;;AAEDH,cAAc,CAACK,WAAf,GAA6B,6BAA7B;AACAL,cAAc,CAACJ,SAAf,GAA2BA,SAA3B;AACA;;AAEA,eAAeI,cAAf"},"metadata":{},"sourceType":"module"}